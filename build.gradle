import groovy.json.JsonSlurper

buildscript {
  ant.get (src: "http://libgdx.badlogicgames.com/libgdx-site/service/getVersions?release=false", dest: "versions.json", ignoreerrors: "true", verbose: "on")
  def versionFile = file ("versions.json")
  def json
  if (versionFile.exists ()) {
    json = new JsonSlurper ().parseText (versionFile.text)
  } else throw new GradleException ("Unable to retrieve latest LibGDX versions, please check your internet connection.")

  ext {
    gdxVersion = json.libgdxSnapshot
    roboVMVersion = json.robovmVersion
    roboVMGradleVersion = json.robovmPluginVersion
    androidToolsVersion = json.androidBuildtoolsVersion
    androidSDKVersion = json.androidSDKVersion
    androidGradleToolsVersion = json.androidGradleToolVersion
  }

  repositories {
    mavenLocal ()
    jcenter ()
    mavenCentral ()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
  }

  dependencies {
    classpath "com.android.tools.build:gradle:$androidGradleToolsVersion"
    classpath "org.robovm:robovm-gradle-plugin:$roboVMGradleVersion"
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.11.3"
}

allprojects {
  apply plugin: "eclipse"
  apply plugin: "idea"

  group = projectGroup
  version = projectVersion

  ext {
    appName = projectName
  }

  repositories {
    mavenLocal ()
    jcenter ()
    mavenCentral ()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
  }
}

project (":desktop") {
  apply plugin: "java"

  sourceCompatibility = projectSourceCompatibility
  targetCompatibility = projectTargetCompatibility

  dependencies {
    compile project (":client")
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    runtime "ch.qos.logback:logback-classic:1.1.3"
  }
}

project (":android") {
  apply plugin: "android"

  configurations { natives }

  dependencies {
    compile (project (":client")) {
      exclude module: "aws-java-sdk"
    }
    compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
    compile "org.slf4j:slf4j-android:1.7.13"
    compile "com.amazonaws:aws-android-sdk-s3:2.2.9"
  }
}

project (":ios") {
  apply plugin: "java"
  apply plugin: "robovm"

  sourceCompatibility = projectSourceCompatibility
  targetCompatibility = projectTargetCompatibility

  dependencies {
    compile project (":client")
    compile "org.robovm:robovm-rt:${roboVMVersion}"
    compile "org.robovm:robovm-cocoatouch:${roboVMVersion}"
    compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-ios"
    runtime "ch.qos.logback:logback-classic:1.1.3"
  }
}

project (":common") {
  apply plugin: "java"
  apply plugin: "groovy"

  sourceCompatibility = projectSourceCompatibility
  targetCompatibility = projectTargetCompatibility

  dependencies {
    compile ("com.forerunnergames.tools:fg-tools-common:1.0-SNAPSHOT")
    compile ("com.forerunnergames.tools:fg-tools-net:1.0-SNAPSHOT")
    compile ("com.esotericsoftware:kryonet:2.22.0-RC1") {
      exclude module: "kryo"
    }
    compile "de.javakaffee:kryo-serializers:0.37"
    compile "net.engio:mbassador:1.2.4"
    compile "com.google.guava:guava:19.0"
    compile "com.google.code.findbugs:jsr305:3.0.1"
    compile "org.slf4j:slf4j-api:1.7.13"
    testCompile "junit:junit:4.12"
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "org.mockito:mockito-core:1.9.5"
    testRuntime "ch.qos.logback:logback-classic:1.1.3"
  }
}

project (":core") {
  apply plugin: "java"
  apply plugin: "groovy"

  sourceCompatibility = projectSourceCompatibility
  targetCompatibility = projectTargetCompatibility

  dependencies {
    compile project (":common")
    compile ("com.stateforge:statemachine:3.6") {
      exclude module: "commons-io"
    }
    testCompile project (path: ":common", configuration: "testRuntime")
    testCompile "junit:junit:4.12"
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "org.mockito:mockito-core:1.9.5"
    testRuntime "ch.qos.logback:logback-classic:1.1.3"
  }
}

project (":client") {
  apply plugin: "java"

  sourceCompatibility = projectSourceCompatibility
  targetCompatibility = projectTargetCompatibility

  dependencies {
    compile project (":common")
    compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    compile "com.amazonaws:aws-java-sdk:1.10.44"
    testCompile project (path: ":common", configuration: "testRuntime")
    testRuntime "ch.qos.logback:logback-classic:1.1.3"
  }
}

project (":server") {
  apply plugin: "java"

  sourceCompatibility = projectSourceCompatibility
  targetCompatibility = projectTargetCompatibility

  dependencies {
    compile project (":core")
    compile "com.beust:jcommander:1.48"
    testCompile project (path: ":common", configuration: "testRuntime")
    testCompile "junit:junit:4.12"
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "org.mockito:mockito-core:1.9.5"
    testRuntime "ch.qos.logback:logback-classic:1.1.3"
    runtime "ch.qos.logback:logback-classic:1.1.3"
  }
}

project (":integration") {
  apply plugin: "java"

  sourceCompatibility = projectSourceCompatibility
  targetCompatibility = projectTargetCompatibility

  configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
  }

  dependencies {
    testCompile project (":core")
    testCompile project (":server")
    testCompile project (":client")
    testCompile "org.testng:testng:6.9.10"
  }

  test {
    useTestNG ()
  }
}

idea {
  project {
    languageLevel = "${projectSourceCompatibility}"
  }

  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

tasks.eclipse.doLast {
  delete ".project"
}
