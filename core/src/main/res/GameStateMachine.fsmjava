<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright © 2011 - 2013 Aaron Mahan.
  ~ Copyright © 2013 - 2016 Forerunner Games, LLC.
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program. If not, see <http://www.gnu.org/licenses/>.
  -->

<sm:StateMachine xmlns:sm="http://www.stateforge.com/StateMachineJava-v1"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://www.stateforge.com/StateMachineJava-v1 http://www.stateforge.com/xsd/StateMachineJava-v1.xsd
  http://www.stateforge.com/StateMachineJava-v1">
  <!-- General settings -->
  <settings asynchronous="true" namespace="com.forerunnergames.peril.core.model.state">
    <object instance="gameModel" class="GameModel" namespace="com.forerunnergames.peril.core.model"/>
  </settings>

  <!-- Events -->
  <events>
    <eventSource name="Game">
      <event id="onCreateGameEvent">
        <parameter type="com.forerunnergames.peril.core.model.state.events.CreateGameEvent" name="event"/>
      </event>
      <event id="onDeterminePlayerTurnOrderCompleteEvent">
        <parameter
                type="com.forerunnergames.peril.common.net.events.server.notification.DeterminePlayerTurnOrderCompleteEvent"
                name="event"/>
      </event>
      <event id="onDistributeInitialArmiesCompleteEvent">
        <parameter
                type="com.forerunnergames.peril.common.net.events.server.notification.DistributeInitialArmiesCompleteEvent"
                name="event"/>
      </event>
      <event id="onRandomlyAssignPlayerCountriesEvent">
        <parameter type="com.forerunnergames.peril.core.model.state.events.RandomlyAssignPlayerCountriesEvent"
                   name="event"/>
      </event>
      <event id="onBeginManualCountryAssignmentEvent">
        <parameter type="com.forerunnergames.peril.core.model.state.events.BeginManualCountryAssignmentEvent"
                   name="event"/>
      </event>
      <event id="onPlayerClaimCountryResponseRequestEvent">
        <parameter
                type="com.forerunnergames.peril.common.net.events.client.request.response.PlayerClaimCountryResponseRequestEvent"
                name="event"/>
      </event>
      <event id="onPlayerClaimCountryResponseSuccessEvent">
        <parameter
                type="com.forerunnergames.peril.common.net.events.server.success.PlayerClaimCountryResponseSuccessEvent"
                name="event"/>
      </event>
      <event id="onPlayerCountryAssignmentCompleteEvent">
        <parameter
                type="com.forerunnergames.peril.common.net.events.server.notification.PlayerCountryAssignmentCompleteEvent"
                name="event"/>
      </event>
      <event id="onEndInitialReinforcementPhaseEvent">
        <parameter
                name="event"
                type="com.forerunnergames.peril.common.net.events.server.notification.EndInitialReinforcementPhaseEvent"/>
      </event>
      <event id="onPlayerReinforceCountryResponseRequestEvent">
        <parameter
                name="event"
                type="com.forerunnergames.peril.common.net.events.client.request.response.PlayerReinforceCountryResponseRequestEvent"/>
      </event>
      <event id="onEndReinforcementPhaseEvent">
        <parameter
                name="event"
                type="com.forerunnergames.peril.common.net.events.server.notification.EndReinforcementPhaseEvent"/>
      </event>
      <event id="onPlayerTradeInCardsResponseRequestEvent">
        <parameter
                name="event"
                type="com.forerunnergames.peril.common.net.events.client.request.response.PlayerTradeInCardsResponseRequestEvent"/>
      </event>
      <event id="onPlayerBeginAttackResponseRequestEvent">
        <parameter
                name="event"
                type="com.forerunnergames.peril.common.net.events.client.request.response.PlayerBeginAttackResponseRequestEvent"/>
      </event>
      <event id="onPlayerAttackOrderResponseSuccessEvent">
        <parameter
                name="event"
                type="com.forerunnergames.peril.common.net.events.server.success.PlayerAttackOrderResponseSuccessEvent"/>
      </event>
      <event id="onPlayerAttackOrderResponseRequestEvent">
        <parameter
                name="event"
                type="com.forerunnergames.peril.common.net.events.client.request.response.PlayerAttackOrderResponseRequestEvent"/>
      </event>
      <event id="onPlayerRetreatOrderResponseRequestEvent">
        <parameter
                name="event"
                type="com.forerunnergames.peril.common.net.events.client.request.response.PlayerRetreatOrderResponseRequestEvent" />
      </event>
      <event id="onPlayerEndAttackPhaseResponseRequestEvent">
        <parameter
                name="event"
                type="com.forerunnergames.peril.common.net.events.client.request.response.PlayerEndAttackPhaseResponseRequestEvent"/>
      </event>
      <event id="onPlayerDefendCountryResponseRequestEvent">
        <parameter
                name="event"
                type="com.forerunnergames.peril.common.net.events.client.request.response.PlayerDefendCountryResponseRequestEvent"/>
      </event>
      <event id="onPlayerAttackVictoryEvent">
        <parameter
                name="event"
                type="com.forerunnergames.peril.common.net.events.server.notification.PlayerAttackVictoryEvent"/>
      </event>
      <event id="onPlayerAttackDefeatEvent">
        <parameter
                name="event"
                type="com.forerunnergames.peril.common.net.events.server.notification.PlayerAttackDefeatEvent"/>
      </event>
      <event id="onPlayerAttackIndecisiveEvent">
        <parameter
                name="event"
                type="com.forerunnergames.peril.common.net.events.server.notification.PlayerAttackIndecisiveEvent"/>
      </event>
      <event id="onPlayerOccupyCountryResponseRequestEvent">
        <parameter
                name="event"
                type="com.forerunnergames.peril.common.net.events.client.request.response.PlayerOccupyCountryResponseRequestEvent"/>
      </event>
      <event id="onPlayerFortifyCountryResponseRequestEvent">
        <parameter
                name="event"
                type="com.forerunnergames.peril.common.net.events.client.request.response.PlayerFortifyCountryResponseRequestEvent"/>
      </event>
      <event id="onEndGameEvent">
        <parameter type="com.forerunnergames.peril.core.model.state.events.EndGameEvent" name="event"/>
      </event>
      <event id="onDestroyGameEvent">
        <parameter type="com.forerunnergames.peril.core.model.state.events.DestroyGameEvent" name="event"/>
      </event>
    </eventSource>
    <eventSource name="Players">
      <event id="onPlayerJoinGameRequestEvent">
        <parameter type="com.forerunnergames.peril.common.net.events.client.request.PlayerJoinGameRequestEvent"
                   name="event"/>
      </event>
      <event id="onPlayerJoinGameSuccessEvent">
        <parameter type="com.forerunnergames.peril.common.net.events.server.success.PlayerJoinGameSuccessEvent"
                   name="event"/>
      </event>
      <event id="onPlayerJoinGameDeniedEvent">
        <parameter type="com.forerunnergames.peril.common.net.events.server.denied.PlayerJoinGameDeniedEvent"
                   name="event"/>
      </event>
      <event id="onEndPlayerTurnEvent">
        <parameter type="com.forerunnergames.peril.common.net.events.server.notification.EndPlayerTurnEvent"
                   name="event"/>
      </event>
      <event id="onSkipPlayerTurnEvent">
        <parameter type="com.forerunnergames.peril.common.net.events.server.notification.SkipPlayerTurnEvent"
                   name="event"/>
      </event>
      <event id="onPlayerLeaveGameEvent">
        <parameter type="com.forerunnergames.peril.common.net.events.server.notification.PlayerLeaveGameEvent"
                   name="event"/>
      </event>
    </eventSource>
  </events>

  <!-- States -->
  <state name="Root">

    <state name="Initial">
      <transition event="onCreateGameEvent" nextState="Operating"/>
    </state>

    <state name="Operating">
      <transition event="onDestroyGameEvent" nextState="End"/>

      <!-- Parallel sections function independently of each other. -->
      <parallel nextState="End">

        <!-- First parallel section -->
        <state name="PlayerHandler">
          <state name="WaitForPlayerEvent">
            <transition event="onPlayerJoinGameRequestEvent" action="gameModel.handlePlayerJoinGameRequest (event)"
                        nextState="WaitForPlayerEvent"/>
            <transition event="onPlayerLeaveGameEvent" action="gameModel.handlePlayerLeaveGame(event)"
                        nextState="WaitForPlayerEvent"/>
          </state>
        </state>

        <!-- Second parallel section -->
        <state name="GameHandler">
          <state name="WaitForGameToBegin">
            <transition event="onPlayerJoinGameSuccessEvent" condition="gameModel.isFull()"
                        action="gameModel.beginGame()" nextState="DeterminePlayerTurnOrder"/>
          </state>
          <state name="PlayingGame">
            <!-- A player leaving during the game should end the game, for now -->
            <transition event="onPlayerLeaveGameEvent" nextState="EndGame"/>
            <!-- Ending the game can occur at any time during the game -->
            <transition event="onEndGameEvent" nextState="EndGame"/>
            <state name="DeterminePlayerTurnOrder">
              <onEntry action="gameModel.determinePlayerTurnOrder()"/>
              <transition event="onDeterminePlayerTurnOrderCompleteEvent" nextState="DistributeInitialArmies"/>
            </state>
            <state name="DistributeInitialArmies">
              <onEntry action="gameModel.distributeInitialArmies()"/>
              <transition event="onDistributeInitialArmiesCompleteEvent" nextState="AssignPlayerCountries"/>
            </state>
            <state name="AssignPlayerCountries">
              <state name="WaitForCountryAssignmentToBegin">
                <onEntry action="gameModel.waitForCountryAssignmentToBegin()"/>
                <transition event="onRandomlyAssignPlayerCountriesEvent" nextState="RandomlyAssignPlayerCountries"/>
                <transition event="onBeginManualCountryAssignmentEvent" nextState="ManuallyAssignPlayerCountries"/>
              </state>
              <state name="RandomlyAssignPlayerCountries">
                <onEntry action="gameModel.randomlyAssignPlayerCountries()"/>
                <transition event="onPlayerCountryAssignmentCompleteEvent" nextState="InitialReinforcementPhase"/>
              </state>
              <state name="ManuallyAssignPlayerCountries">
                <state name="WaitForPlayersToClaimInitialCountries">
                  <onEntry action="gameModel.waitForPlayersToClaimInitialCountries()"/>
                  <onExit action="gameModel.advancePlayerTurn()"/>
                  <transition event="onPlayerClaimCountryResponseRequestEvent"
                              condition="gameModel.verifyPlayerClaimCountryResponseRequest(event)"
                              nextState="WaitForPlayersToClaimInitialCountries"/>
                  <transition event="onPlayerCountryAssignmentCompleteEvent" nextState="InitialReinforcementPhase"/>
                </state>
              </state>
            </state>
            <state name="InitialReinforcementPhase">
              <onEntry action="gameModel.beginInitialReinforcementPhase()"/>
              <onExit action="gameModel.resetTurn()"/>
              <state name="WaitForPlayersToReinforceInitialCountries">
                <onEntry action="gameModel.waitForPlayersToReinforceInitialCountries()"/>
                <onExit action="gameModel.advancePlayerTurn()"/>
                <transition event="onSkipPlayerTurnEvent"
                            action="gameModel.skipPlayerTurn(event)"
                            nextState="WaitForPlayersToReinforceInitialCountries"/>
                <transition event="onPlayerReinforceCountryResponseRequestEvent"
                            condition="gameModel.verifyPlayerInitialCountryReinforcements(event)"
                            nextState="WaitForPlayersToReinforceInitialCountries"/>
                <transition event="onEndInitialReinforcementPhaseEvent"
                            nextState="TurnPhase"/>
              </state>
            </state>
            <state name="TurnPhase">
              <state name="PlayerTurn">
                <onEntry action="gameModel.beginPlayerTurn()"/>
                <transition event="onSkipPlayerTurnEvent"
                            action="gameModel.skipPlayerTurn(event)"
                            nextState="AdvancePlayerTurn"/>
                <state name="ReinforcementPhase">
                  <onEntry action="gameModel.beginReinforcementPhase()"/>
                  <onExit action="gameModel.endReinforcementPhase()"/>
                  <state name="WaitForPlayerToPlaceReinforcements">
                    <onEntry action="gameModel.waitForPlayerToPlaceReinforcements()"/>
                    <transition event="onPlayerReinforceCountryResponseRequestEvent"
                                action="gameModel.placePlayerCountryReinforcements(event)"
                                nextState="WaitForPlayerToPlaceReinforcements"/>
                    <transition event="onPlayerTradeInCardsResponseRequestEvent"
                                action="gameModel.handlePlayerCardTradeIn(event)"
                                nextState="WaitForPlayerToPlaceReinforcements"/>
                    <transition event="onEndReinforcementPhaseEvent"
                                action="gameModel.endReinforcementPhase()"
                                nextState="AttackPhase"/>
                  </state>
                </state>
                <state name="AttackPhase">
                  <onEntry action="gameModel.beginAttackPhase()"/>
                  <onExit action="gameModel.endAttackPhase()"/>
                  <state name="WaitForPlayerBeginAttack" >
                    <onEntry action="gameModel.waitForPlayerToBeginAttack()" />
                    <transition event="onPlayerBeginAttackResponseRequestEvent"
                                condition="gameModel.verifyPlayerAttackVector(event)"
                                nextState="WaitForPlayerAttackOrder" />
                    <transition event="onPlayerEndAttackPhaseResponseRequestEvent"
                                action="gameModel.processPlayerEndAttackPhase(event)"
                                nextState="FortifyPhase" />
                  </state>
                  <state name="WaitForPlayerAttackOrder">
                    <onEntry action="gameModel.waitForPlayerAttackOrder()"/>
                    <transition event="onPlayerAttackOrderResponseRequestEvent"
                                condition="gameModel.verifyPlayerAttackOrder(event)"
                                nextState="WaitForDefenderResponse"/>
                    <transition event="onPlayerRetreatOrderResponseRequestEvent"
                                action="gameModel.processPlayerRetreat(event)"
                                nextState="WaitForPlayerBeginAttack"/>
                  </state>
                  <state name="WaitForDefenderResponse">
                    <transition event="onPlayerDefendCountryResponseRequestEvent"
                                condition="gameModel.verifyPlayerDefendCountryResponseRequest(event)"
                                nextState="ProcessBattle"/>
                  </state>
                  <state name="ProcessBattle">
                    <onEntry action="gameModel.processBattle()"/>
                    <transition event="onPlayerAttackVictoryEvent"
                                nextState="WaitForPlayerToOccupyCountry"/>
                    <transition event="onPlayerAttackDefeatEvent"
                                nextState="WaitForPlayerBeginAttack" />
                    <transition event="onPlayerAttackIndecisiveEvent"
                                nextState="WaitForPlayerAttackOrder" />
                  </state>
                  <state name="WaitForPlayerToOccupyCountry">
                    <transition event="onPlayerOccupyCountryResponseRequestEvent"
                                condition="gameModel.verifyPlayerOccupyCountryResponseRequest(event)"
                                nextState="WaitForPlayerBeginAttack"/>
                  </state>
                </state>
                <state name="FortifyPhase">
                  <onEntry action="gameModel.beginFortifyPhase()"/>
                  <onExit action="gameModel.endFortifyPhase()"/>
                  <state name="WaitForPlayerToFortifyCountry">
                    <transition event="onPlayerFortifyCountryResponseRequestEvent"
                                condition="gameModel.verifyPlayerFortifyCountryResponseRequest(event)"
                                nextState="AdvancePlayerTurn"/>
                  </state>
                </state>
              </state> <!-- End PlayerTurn state -->
              <state name="AdvancePlayerTurn">
                <onEntry action="gameModel.endPlayerTurn()"/>
                <onExit action="gameModel.advancePlayerTurn()"/>
                <transition event="onEndPlayerTurnEvent" nextState="PlayerTurn"/>
              </state>
            </state> <!-- End TurnPhase state -->
          </state> <!-- End PlayingGame state -->
          <state name="EndGame">
            <onEntry action="gameModel.endGame()"/>
            <transition event="onCreateGameEvent" condition="gameModel.isNotFull()" nextState="WaitForGameToBegin"/>
            <transition event="onCreateGameEvent" condition="gameModel.isFull()" nextState="PlayingGame"/>
          </state>
        </state> <!-- End GameHandler state -->
      </parallel>
    </state> <!-- End Operating state -->

    <state name="End" kind="final"/>

  </state> <!-- End Root state -->
</sm:StateMachine>
