<?xml version="1.0" encoding="UTF-8"?>
<sm:StateMachine xmlns:sm="http://www.stateforge.com/StateMachineJava-v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.stateforge.com/StateMachineJava-v1 http://www.stateforge.com/xsd/StateMachineJava-v1.xsd
  http://www.stateforge.com/StateMachineJava-v1">
  <!-- General settings -->
  <settings asynchronous="true" namespace="com.forerunnergames.peril.core.model.state">
    <object instance="stateMachineActionHandler" class="StateMachineActionHandler" namespace="com.forerunnergames.peril.core.model" />
  </settings>

  <!-- Events -->
  <events>
    <eventSource name="Game">
      <event id="onCreateGameEvent">
        <parameter type="com.forerunnergames.peril.core.model.state.events.CreateGameEvent" name="event" />
      </event>
      <event id="onDeterminePlayerTurnOrderCompleteEvent">
        <parameter
          type="com.forerunnergames.peril.core.shared.net.events.server.notification.DeterminePlayerTurnOrderCompleteEvent"
          name="event" />
      </event>
      <event id="onDistributeInitialArmiesCompleteEvent">
        <parameter
          type="com.forerunnergames.peril.core.shared.net.events.server.notification.DistributeInitialArmiesCompleteEvent"
          name="event" />
      </event>
      <event id="onRandomlyAssignPlayerCountriesEvent">
        <parameter type="com.forerunnergames.peril.core.model.state.events.RandomlyAssignPlayerCountriesEvent"
          name="event" />
      </event>
      <event id="onBeginManualCountrySelectionEvent">
        <parameter type="com.forerunnergames.peril.core.model.state.events.BeginManualCountrySelectionEvent"
          name="event" />
      </event>
      <event id="onPlayerSelectCountryResponseRequestEvent">
        <parameter
          type="com.forerunnergames.peril.core.shared.net.events.client.request.response.PlayerSelectCountryResponseRequestEvent"
          name="event" />
      </event>
      <event id="onPlayerSelectCountryResponseSuccessEvent">
        <parameter
          type="com.forerunnergames.peril.core.shared.net.events.server.success.PlayerSelectCountryResponseSuccessEvent"
          name="event" />
      </event>
      <event id="onPlayerCountryAssignmentCompleteEvent">
        <parameter
          type="com.forerunnergames.peril.core.shared.net.events.server.notification.PlayerCountryAssignmentCompleteEvent"
          name="event" />
      </event>
      <event id="onEndGameEvent">
        <parameter type="com.forerunnergames.peril.core.model.state.events.EndGameEvent" name="event" />
      </event>
      <event id="onDestroyGameEvent">
        <parameter type="com.forerunnergames.peril.core.model.state.events.DestroyGameEvent" name="event" />
      </event>
    </eventSource>
    <eventSource name="Players">
      <event id="onPlayerJoinGameRequestEvent">
        <parameter type="com.forerunnergames.peril.core.shared.net.events.client.request.PlayerJoinGameRequestEvent"
                   name="event" />
      </event>
      <event id="onPlayerJoinGameSuccessEvent">
        <parameter type="com.forerunnergames.peril.core.shared.net.events.server.success.PlayerJoinGameSuccessEvent"
                   name="event" />
      </event>
      <event id="onPlayerJoinGameDeniedEvent">
        <parameter type="com.forerunnergames.peril.core.shared.net.events.server.denied.PlayerJoinGameDeniedEvent"
                   name="event"/>
      </event>
      <event id="onPlayerLeaveGameEvent">
        <parameter type="com.forerunnergames.peril.core.shared.net.events.server.notification.PlayerLeaveGameEvent"
                   name="event" />
      </event>
    </eventSource>
  </events>

  <!-- States -->
  <state name="Root">

    <state name="Initial">
      <transition event="onCreateGameEvent" nextState="Operating" />
    </state>

    <state name="Operating">
      <transition event="onDestroyGameEvent" nextState="End" />

      <!-- Parallel sections function independently of each other. -->
      <parallel nextState="End">

        <!-- First parallel section -->
        <state name="PlayerHandler">
          <state name="WaitForPlayerEvent">
            <transition event="onPlayerJoinGameRequestEvent" action="stateMachineActionHandler.handlePlayerJoinGameRequest (event)"
                        nextState="WaitForPlayerEvent" />
            <transition event="onPlayerLeaveGameEvent" action="stateMachineActionHandler.handlePlayerLeaveGame(event)"
                        nextState="WaitForPlayerEvent" />
          </state>
        </state>

        <!-- Second parallel section -->
        <state name="GameHandler">
          <state name="WaitForGameToBegin">
            <transition event="onPlayerJoinGameSuccessEvent" condition="stateMachineActionHandler.isFull()"
                        action="stateMachineActionHandler.beginGame()" nextState="DeterminePlayerTurnOrder" />
          </state>
          <state name="PlayingGame">
            <!-- A player leaving during the game should end the game, for now -->
            <transition event="onPlayerLeaveGameEvent" nextState="EndGame" />
            <!-- Ending the game can occur at any time during the game -->
            <transition event="onEndGameEvent" nextState="EndGame" />
            <state name="DeterminePlayerTurnOrder">
              <onEntry action="stateMachineActionHandler.determinePlayerTurnOrder()" />
              <transition event="onDeterminePlayerTurnOrderCompleteEvent" nextState="DistributeInitialArmies" />
            </state>
            <state name="DistributeInitialArmies">
              <onEntry action="stateMachineActionHandler.distributeInitialArmies()" />
              <transition event="onDistributeInitialArmiesCompleteEvent" nextState="AssignPlayerCountries" />
            </state>
            <state name="AssignPlayerCountries">
              <state name="WaitForCountrySelectionToBegin">
                <onEntry action="stateMachineActionHandler.waitForCountrySelectionToBegin()" />
                <transition event="onRandomlyAssignPlayerCountriesEvent" nextState="RandomlyAssignPlayerCountries" />
                <transition event="onBeginManualCountrySelectionEvent" nextState="ManuallyAssignPlayerCountries" />
              </state>
              <state name="RandomlyAssignPlayerCountries">
                <onEntry action="stateMachineActionHandler.randomlyAssignPlayerCountries()" />
                <transition event="onPlayerCountryAssignmentCompleteEvent" nextState="EndGame" />
              </state>
              <state name="ManuallyAssignPlayerCountries">
                <state name="WaitForPlayersToSelectInitialCountries">
                  <onEntry action="stateMachineActionHandler.waitForPlayersToSelectInitialCountries()" />
                  <transition event="onPlayerSelectCountryResponseRequestEvent"
                              condition="stateMachineActionHandler.verifyPlayerCountrySelectionRequest(event)"
                              nextState="WaitForPlayersToSelectInitialCountries" />
                  <transition event="onPlayerCountryAssignmentCompleteEvent" nextState="EndGame" />
                </state>
              </state>
            </state>
            <state name="TurnPhase">
              <onEntry action="stateMachineActionHandler.beginTurnPhase()" />
              <onExit action="stateMachineActionHandler.endTurnPhase()" />
              <state name="ReinforcementPhase">
                <onEntry action="stateMachineActionHandler.beginReinforcementPhase()" />
                <state name="WaitForPlayerToPlaceReinforcements">
                  <onEntry action="stateMachineActionHandler.waitForPlayerToPlaceReinforcements()" />
                </state>
              </state>
            </state>
          </state>
          <state name="EndGame">
            <onEntry action="stateMachineActionHandler.endGame()" />
            <transition event="onCreateGameEvent" condition="stateMachineActionHandler.isNotFull()" nextState="WaitForGameToBegin" />
            <transition event="onCreateGameEvent" condition="stateMachineActionHandler.isFull()" nextState="DeterminePlayerTurnOrder" />
          </state>
        </state>
      </parallel>
    </state>

    <state name="End" kind="final" />

  </state>
</sm:StateMachine>
